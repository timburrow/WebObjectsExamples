{
    attributes = (
        {
            columnName = creature_id; 
            externalType = integer; 
            name = creatureId; 
            precision = 10; 
            valueClassName = NSNumber; 
            valueType = i; 
        }, 
        {
            allowsNull = Y; 
            columnName = date_of_birth; 
            externalType = datetime; 
            name = dateOfBirth; 
            serverTimeZone = US/Eastern; 
            valueClassName = NSCalendarDate; 
        }, 
        {
            allowsNull = Y; 
            columnName = first_name; 
            externalType = char; 
            name = firstName; 
            serverTimeZone = US/Eastern; 
            valueClassName = NSString; 
            valueType = c; 
            width = 50; 
        }, 
        {
            allowsNull = Y; 
            columnName = is_carnivore; 
            externalType = integer; 
            name = isCarnivore; 
            serverTimeZone = US/Eastern; 
            valueClassName = NSNumber; 
            valueType = i; 
        }, 
        {
            allowsNull = Y; 
            columnName = number_of_legs; 
            externalType = integer; 
            name = numberOfLegs; 
            precision = 10; 
            serverTimeZone = US/Eastern; 
            valueClassName = NSNumber; 
            valueType = i; 
        }, 
        {
            allowsNull = Y; 
            columnName = scientific_name; 
            externalType = char; 
            name = scientificName; 
            valueClassName = NSString; 
            valueType = c; 
            width = 50; 
        }
    ); 
    attributesUsedForLocking = (creatureId, dateOfBirth, isCarnivore, firstName, numberOfLegs, scientificName); 
    className = Lion; 
    classProperties = (dateOfBirth, isCarnivore, firstName, numberOfLegs, folders, scientificName); 
    externalName = Lion; 
    fetchSpecificationDictionary = {}; 
    internalInfo = {
        _clientClassPropertyNames = (numberOfLegs, color, dateOfBirth, isCarnivore, firstName); 
    }; 
    name = Lion; 
    parent = Wild; 
    primaryKeyAttributes = (creatureId); 
    relationships = (
        {
            deleteRule = EODeleteRuleCascade; 
            destination = FolderData; 
            internalInfo = {_nameInObjectStore = treeNodeDatas; }; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = dataId; sourceAttribute = creatureId; }); 
            name = folderDatas; 
            ownsDestination = Y; 
            propagatesPrimaryKey = Y; 
        }, 
        {
            definition = folderDatas.folder; 
            internalInfo = {_nameInObjectStore = folderDatas_folder; }; 
            joinSemantic = EOInnerJoin; 
            name = folders; 
        }
    ); 
}
