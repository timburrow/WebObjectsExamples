
{
    attributes = 
    (
       
       {
           columnName = creature_id;
           externalType = integer;
           name = creatureId;
           precision = 10;
           serverTimeZone = US/Eastern;
           valueClassName = NSNumber;
           valueType = i;
       }, 
       
       {
           allowsNull = Y;
           columnName = "";
           definition = person.creature.dateOfBirth;
           externalType = datetime;
           name = dateOfBirth;
           serverTimeZone = US/Eastern;
           valueClassName = NSCalendarDate;
       }, 
       
       {
           allowsNull = Y;
           columnName = "";
           definition = person.favoriteDomesticatedAnimald;
           externalType = integer;
           name = favoriteDomesticatedAnimald;
           serverTimeZone = US/Eastern;
           valueClassName = NSNumber;
           valueType = i;
       }, 
       
       {
           allowsNull = Y;
           columnName = "";
           definition = person.creature.firstName;
           externalType = char;
           name = firstName;
           serverTimeZone = US/Eastern;
           valueClassName = NSString;
           valueType = c;
           width = 50;
       }, 
       
       {
           allowsNull = Y;
           columnName = "";
           definition = person.lastName;
           externalType = char;
           name = lastName;
           serverTimeZone = US/Eastern;
           valueClassName = NSString;
           valueType = c;
           width = 50;
       }, 
       
       {
           allowsNull = Y;
           columnName = "";
           definition = person.creature.numberOfLegs;
           externalType = integer;
           name = numberOfLegs;
           precision = 10;
           serverTimeZone = US/Eastern;
           valueClassName = NSNumber;
           valueType = i;
       }, 
       
       {
           allowsNull = Y;
           columnName = "";
           definition = person.ssn;
           externalType = char;
           name = ssn;
           serverTimeZone = US/Eastern;
           valueClassName = NSString;
           valueType = c;
           width = 12;
       }
    );
    attributesUsedForLocking = 
    (
       creatureId, 
       dateOfBirth, 
       favoriteDomesticatedAnimald, 
       firstName, 
       lastName, 
       numberOfLegs, 
       ssn
    );
    className = Child;
    classProperties = 
    (
       dateOfBirth, 
       favoriteDomesticatedAnimal, 
       firstName, 
       folders, 
       lastName, 
       numberOfLegs, 
       ssn
    );
    externalName = Child;
    internalInfo = 
    {
        _clientClassPropertyNames = 
        (
           dateOfBirth, 
           favoriteDomesticatedAnimal, 
           firstName, 
           lastName, 
           numberOfLegs, 
           ssn
        );
        _nameInObjectStore = Person;
    };
    name = Child;
    parent = Person;
    primaryKeyAttributes = 
    (
       creatureId
    );
    relationships = 
    (
       
       {
           deleteRule = EODeleteRuleCascade;
           destination = Creature;
           isMandatory = Y;
           isToMany = N;
           joinSemantic = EOInnerJoin;
           joins = 
           (
              
              {
                  destinationAttribute = creatureId;
                  sourceAttribute = creatureId;
              }
           );
           name = creature;
           ownsDestination = Y;
       }, 
       
       {
           definition = person.favoriteDomesticatedAnimal;
           internalInfo = 
           {
               _nameInObjectStore = person_favoriteDomesticatedAnimal;
           };
           name = favoriteDomesticatedAnimal;
       }, 
       
       {
           deleteRule = EODeleteRuleCascade;
           destination = FolderData;
           isToMany = Y;
           joinSemantic = EOInnerJoin;
           joins = 
           (
              
              {
                  destinationAttribute = dataId;
                  sourceAttribute = creatureId;
              }
           );
           name = folderDatas;
           ownsDestination = Y;
           propagatesPrimaryKey = Y;
       }, 
       
       {
           definition = folderDatas.folder;
           name = folders;
       }, 
       
       {
           deleteRule = EODeleteRuleCascade;
           destination = Person;
           isMandatory = Y;
           isToMany = N;
           joinSemantic = EOInnerJoin;
           joins = 
           (
              
              {
                  destinationAttribute = creatureId;
                  sourceAttribute = creatureId;
              }
           );
           name = person;
           ownsDestination = Y;
       }
    );
}