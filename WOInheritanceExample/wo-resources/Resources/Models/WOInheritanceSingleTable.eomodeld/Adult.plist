{
    attributes = (
        {
            columnName = creature_id;
            externalType = integer;
            name = creatureId;
            precision = 10;
            serverTimeZone = US/Eastern;
            valueClassName = NSNumber;
            valueType = i;
        },
        {
            allowsNull = Y;
            columnName = date_of_birth;
            externalType = datetime;
            name = dateOfBirth;
            serverTimeZone = US/Eastern;
            valueClassName = NSCalendarDate;
        },
        {
            allowsNull = Y;
            columnName = drivers_license;
            externalType = char;
            name = driversLicense;
            valueClassName = NSString;
            width = 50;
        },
        {
            allowsNull = Y;
            columnName = favorite_domesticated_animal_id;
            externalType = integer;
            name = favoriteDomesticatedAnimald;
            serverTimeZone = US/Eastern;
            valueClassName = NSNumber;
            valueType = i;
        },
        {
            allowsNull = Y;
            columnName = first_name;
            externalType = char;
            name = firstName;
            serverTimeZone = US/Eastern;
            valueClassName = NSString;
            valueType = c;
            width = 50;
        },
        {
            allowsNull = Y;
            columnName = last_name;
            externalType = char;
            name = lastName;
            serverTimeZone = US/Eastern;
            valueClassName = NSString;
            valueType = c;
            width = 50;
        },
        {
            allowsNull = Y;
            columnName = number_of_legs;
            externalType = integer;
            name = numberOfLegs;
            precision = 10;
            serverTimeZone = US/Eastern;
            valueClassName = NSNumber;
            valueType = i;
        },
        {
            allowsNull = Y;
            columnName = ssn;
            externalType = char;
            name = ssn;
            serverTimeZone = US/Eastern;
            valueClassName = NSString;
            valueType = c;
            width = 12;
        },
        {
            allowsNull = Y;
            columnName = type;
            externalType = char;
            name = type;
            serverTimeZone = US/Eastern;
            valueClassName = NSString;
            width = 50;
			valueType = c;
        }
    );
    attributesUsedForLocking = (
        numberOfLegs,
        dateOfBirth,
        firstName,
        creatureId,
        type,
        driversLicense,
        favoriteDomesticatedAnimald,
        lastName,
        ssn
    );
    className = Adult;
    classProperties = (
        numberOfLegs,
        dateOfBirth,
        firstName,
        folders,
        type,
        driversLicense,
        lastName,
        ssn,
        favoriteDomesticatedAnimal
    );
    externalName = Creature;
    fetchSpecificationDictionary = {};
    internalInfo = {
        _clientClassPropertyNames = (
            numberOfLegs,
            dateOfBirth,
            firstName,
            type,
            lastName,
            driversLicense,
            breed,
            ssn,
            favoriteDomesticatedAnimal
        );
    };
    name = Adult;
    parent = Person;
    primaryKeyAttributes = (creatureId);
    relationships = (
        {
            destination = Domesticated;
            isToMany = N;
            joinSemantic = EOInnerJoin;
            joins = (
                {
                    destinationAttribute = creatureId;
                    sourceAttribute = favoriteDomesticatedAnimald;
                }
            );
            name = favoriteDomesticatedAnimal;
        },
        {
            deleteRule = EODeleteRuleCascade;
            destination = FolderData;
            isToMany = Y;
            joinSemantic = EOInnerJoin;
            joins = ({destinationAttribute = dataId; sourceAttribute = creatureId; });
            name = folderDatas;
            ownsDestination = Y;
            propagatesPrimaryKey = Y;
        },
        {definition = folderDatas.folder; joinSemantic = EOInnerJoin; name = folders; }
    );
    restrictingQualifier = "(type = 'Adult')";
}
