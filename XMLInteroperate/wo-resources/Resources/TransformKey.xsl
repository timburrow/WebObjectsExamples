<?xml version="1.0" encoding="UTF-8"?>
<!--
   TransformKey.xsl
   [XMLInteroperate Project]
  
   Copyright:  Copyright 2005 Apple Computer, Inc. All rights reserved.
  
   Disclaimer:
        IMPORTANT:  This Apple software is supplied to you by Apple Computer, Inc.
        ("Apple") in consideration of your agreement to the following terms, and your
        use, installation, modification or redistribution of this Apple software
        constitutes acceptance of these terms.  If you do not agree with these terms,
        please do not use, install, modify or redistribute this Apple software.
  
        In consideration of your agreement to abide by the following terms, and subject
        to these terms, Apple grants you a personal, non-exclusive license, under AppleUs
        copyrights in this original Apple software (the "Apple Software"), to use,
        reproduce, modify and redistribute the Apple Software, with or without
        modifications, in source and/or binary forms; provided that if you redistribute
        the Apple Software in its entirety and without modifications, you must retain
        this notice and the following text and disclaimers in all such redistributions of
        the Apple Software.  Neither the name, trademarks, service marks or logos of
        Apple Computer, Inc. may be used to endorse or promote products derived from the
        Apple Software without specific prior written permission from Apple.  Except as
        expressly stated in this notice, no other rights or licenses, express or implied,
        are granted by Apple herein, including but not limited to any patent rights that
        may be infringed by your derivative works or by other works in which the Apple
        Software may be incorporated.
  
        The Apple Software is provided by Apple on an "AS IS" basis.  APPLE MAKES NO
        WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED
        WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND OPERATION ALONE OR IN
        COMBINATION WITH YOUR PRODUCTS.
  
        IN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL OR
        CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
        GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION, MODIFICATION AND/OR DISTRIBUTION
        OF THE APPLE SOFTWARE, HOWEVER CAUSED AND WHETHER UNDER THEORY OF CONTRACT, TORT
        (INCLUDING NEGLIGENCE), STRICT LIABILITY OR OTHERWISE, EVEN IF APPLE HAS BEEN
        ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<!--
This is pretty much a standard XSLT stylesheet. You can learn more about writing XSLTs from
the W3C website or numerous tutorials found on the web. We attempt to comment on only the relevant
and interesting parts in this stylesheet.
-->

<!--
Be sure to omit the prefix "woxml" or else the eventual output will not be what you want.
-->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:woxml="http://www.apple.com/webobjects/XMLSerialization"
    version="1.0"
    exclude-result-prefixes="woxml">
<xsl:output method="xml" encoding="UTF-8" omit-xml-declaration="yes" indent="yes"/>

<xsl:template match="woxml:content">
  <xsl:apply-templates />
</xsl:template>

<!-- //////////////////////// Special rules /////////////////////////////// -->

<!--
The original XML output of BigDecimal objects are hard to transform. We just ignore them totally.
The substitute is a string element with the correct numeric data that is also present somewhere in
the XML output.
-->
<xsl:template match="woxml:object[@key='askingPrice']" />
<xsl:template match="woxml:object[@key='sellingPrice']" />
<!-- ohmtmp, pending 2962421 -->
<xsl:template match="woxml:object[@key='isSold']" />

<!-- //////////////////////// General rules ///////////////////////////////
These are general rules that can easily be reused (cut-n-paste) by you developers, if you
do need to transform output generated by com.webobjects.foundation.xml.NSXMLOutputStream.
-->

<xsl:template name="getTagName">
  <!-- extract tag name -->
  <xsl:choose>
    <xsl:when test="@key!=''"><xsl:value-of select="@key"/></xsl:when>
    <xsl:otherwise>
      <xsl:if test="@field!=''"><xsl:value-of select="@field"/></xsl:if>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template name="TxrPrimitive">
  <xsl:param name="type" />

  <xsl:variable name="tag"><xsl:call-template name="getTagName" /></xsl:variable>

  <xsl:if test="$tag!=''">
    <xsl:element name="{$tag}">
      <xsl:attribute name="type"><xsl:value-of select="$type"/></xsl:attribute>
      <xsl:value-of select="." />
    </xsl:element>
  </xsl:if>
</xsl:template>

<xsl:template match="woxml:boolean">
    <xsl:call-template name="TxrPrimitive">
      <xsl:with-param name="type">boolean</xsl:with-param>
    </xsl:call-template>
</xsl:template>

<xsl:template match="woxml:byte">
  <xsl:call-template name="TxrPrimitive">
    <xsl:with-param name="type">byte</xsl:with-param>
  </xsl:call-template>
</xsl:template>

<xsl:template match="woxml:short">
  <xsl:call-template name="TxrPrimitive">
    <xsl:with-param name="type">short</xsl:with-param>
  </xsl:call-template>
</xsl:template>

<xsl:template match="woxml:ch">
  <xsl:call-template name="TxrPrimitive">
    <xsl:with-param name="type">char</xsl:with-param>
  </xsl:call-template>
</xsl:template>

<xsl:template match="woxml:int">
  <xsl:call-template name="TxrPrimitive">
    <xsl:with-param name="type">int</xsl:with-param>
  </xsl:call-template>
</xsl:template>

<xsl:template match="woxml:long">
  <xsl:call-template name="TxrPrimitive">
    <xsl:with-param name="type">long</xsl:with-param>
  </xsl:call-template>
</xsl:template>

<xsl:template match="woxml:float">
  <xsl:call-template name="TxrPrimitive">
    <xsl:with-param name="type">float</xsl:with-param>
  </xsl:call-template>
</xsl:template>

<xsl:template match="woxml:double">
  <xsl:call-template name="TxrPrimitive">
    <xsl:with-param name="type">double</xsl:with-param>
  </xsl:call-template>
</xsl:template>

<xsl:template match="woxml:object">
  <xsl:variable name="tag"><xsl:call-template name="getTagName" /></xsl:variable>
  <xsl:variable name="type" select="woxml:class/@name" />

  <!--
  Because our WOXMLDecoder with mapping files doesn't support cyclic references,
  we omit such elements; hence we check that @idRef is empty string.
  -->
  <xsl:if test="$tag!='' and not(string(@idRef))">
    <xsl:element name="{$tag}">

      <xsl:choose>
        <xsl:when test="$type='java.lang.Double' or $type='java.lang.Integer' or $type='java.lang.Boolean'">
          <xsl:value-of select="woxml:double | woxml:int | woxml:boolean" />
        </xsl:when>
        <xsl:otherwise>
          <xsl:apply-templates />
        </xsl:otherwise>
      </xsl:choose>
    </xsl:element>
  </xsl:if>
</xsl:template>

<xsl:template match="woxml:string">
  <xsl:variable name="tag"><xsl:call-template name="getTagName" /></xsl:variable>

  <xsl:if test="$tag!=''">
    <xsl:element name="{$tag}"><xsl:value-of select="." /></xsl:element>
  </xsl:if>
</xsl:template>

</xsl:stylesheet>